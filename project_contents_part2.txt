    deploymentBlock: "21224418",\n    tiers: {\n      1: { name: "Common", multiplier: 1, price: "100000000000000000000000000" },\n      2: { name: "Rare", multiplier: 10, price: "1000000000000000000000000000" },\n      3: { name: "Legendary", multiplier: 100, price: "10000000000000000000000000000" },\n    },\n    description:\n      "Element 369 NFTs are minted with TitanX or ETH during specific sale cycles. Burning NFTs updates a multiplier pool and tracks burn cycles for reward distribution in the Holder Vault.",\n  },\n  staxNFT: {\n    name: "Stax",\n    symbol: "STAX",\n    address: "0x74270Ca3a274B4dbf26be319A55188690CACE6E1",\n    deploymentBlock: "21452667",\n    tiers: {\n      1: { name: "Common", multiplier: 1, price: "100000000000000000000000000" },\n      2: { name: "Common Amped", multiplier: 1.2, price: "100000000000000000000000000", amplifier: "10000000000000000000000000" },\n      3: { name: "Common Super", multiplier: 1.4, price: "100000000000000000000000000", amplifier: "20000000000000000000000000" },\n      4: { name: "Common LFG", multiplier: 2, price: "100000000000000000000000000", amplifier: "50000000000000000000000000" },\n      5: { name: "Rare", multiplier: 10, price: "1000000000000000000000000000" },\n      6: { name: "Rare Amped", multiplier: 12, price: "1000000000000000000000000000", amplifier: "100000000000000000000000000" },\n      7: { name: "Rare Super", multiplier: 14, price: "1000000000000000000000000000", amplifier: "200000000000000000000000000" },\n      8: { name: "Rare LFG", multiplier: 20, price: "1000000000000000000000000000", amplifier: "500000000000000000000000000" },\n      9: { name: "Legendary", multiplier: 100, price: "10000000000000000000000000000" },\n      10: { name: "Legendary Amped", multiplier: 120, price: "10000000000000000000000000000", amplifier: "1000000000000000000000000000" },\n      11: { name: "Legendary Super", multiplier: 140, price: "10000000000000000000000000000", amplifier: "2000000000000000000000000000" },\n      12: { name: "Legendary LFG", multiplier: 200, price: "10000000000000000000000000000", amplifier: "5000000000000000000000000000" },\n    },\n    description:\n      "Stax NFTs are minted with TitanX or ETH during a presale. Burning NFTs after a cooldown period claims backing rewards, with multipliers contributing to a pool for cycle-based reward calculations.",\n  },\n  ascendantNFT: {\n    name: "Ascendant",\n    symbol: "ASCNFT",\n    address: "0x9da95c32c5869c84ba2c020b5e87329ec0adc97f",\n    deploymentBlock: "21112535",\n    tiers: {\n      1: { name: "Tier 1", price: "7812500000000000000000", multiplier: 1.01 },\n      2: { name: "Tier 2", price: "15625000000000000000000", multiplier: 1.02 },\n      3: { name: "Tier 3", price: "31250000000000000000000", multiplier: 1.03 },\n      4: { name: "Tier 4", price: "62500000000000000000000", multiplier: 1.04 },\n      5: { name: "Tier 5", price: "125000000000000000000000", multiplier: 1.05 },\n      6: { name: "Tier 6", price: "250000000000000000000000", multiplier: 1.06 },\n      7: { name: "Tier 7", price: "500000000000000000000000", multiplier: 1.07 },\n      8: { name: "Tier 8", price: "1000000000000000000000000", multiplier: 1.08 },\n    },\n    description:\n      "Ascendant NFTs are minted with ASCENDANT tokens and offer staking rewards from DragonX pools over 8, 28, and 90-day periods. Features fusion mechanics to combine same-tier NFTs into higher tiers.",\n  },\n  e280: {\n    name: "E280",\n    symbol: "E280",\n    address: null, // Not deployed yet\n    deploymentBlock: null,\n    tiers: {}, // Define if applicable\n    description: "E280 NFTs on BASE chain. Contract not yet deployed.",\n  },\n};\n\nexport const contractAddresses = {\n  element280: nftContracts.element280.address,\n  element369: nftContracts.element369.address,\n  staxNFT: nftContracts.staxNFT.address,\n  ascendantNFT: nftContracts.ascendantNFT.address,\n  e280: nftContracts.e280.address,\n};\n\nexport const deploymentBlocks = {\n  element280: nftContracts.element280.deploymentBlock,\n  element369: nftContracts.element369.deploymentBlock,\n  staxNFT: nftContracts.staxNFT.deploymentBlock,\n  ascendantNFT: nftContracts.ascendantNFT.deploymentBlock,\n  e280: nftContracts.e280.deploymentBlock,\n};\n\nexport const contractTiers = {\n  element280: nftContracts.element280.tiers,\n  element369: nftContracts.element369.tiers,\n  staxNFT: nftContracts.staxNFT.tiers,\n  ascendantNFT: nftContracts.ascendantNFT.tiers,\n  e280: nftContracts.e280.tiers,\n};\n\nexport const contractDetails = {\n  element280: {\n    name: nftContracts.element280.name,\n    totalTokens: 8209, // Update with actual value if needed\n    pageSize: 1000,\n    apiEndpoint: '/api/holders/Element280',\n  },\n  element369: {\n    name: nftContracts.element369.name,\n    totalTokens: 0, // Update with actual value\n    pageSize: 1000,\n    apiEndpoint: '/api/holders/Element369',\n  },\n  staxNFT: {\n    name: nftContracts.staxNFT.name,\n    totalTokens: 0, // Update with actual value\n    pageSize: 1000,\n    apiEndpoint: '/api/holders/Stax',\n  },\n  ascendantNFT: {\n    name: nftContracts.ascendantNFT.name,\n    totalTokens: 0, // Update with actual value\n    pageSize: 1000,\n    apiEndpoint: '/api/holders/Ascendant',\n  },\n  e280: {\n    name: nftContracts.e280.name,\n    totalTokens: 0,\n    pageSize: 1000,\n    apiEndpoint: '/api/holders/E280',\n  },\n};\n\nexport function getContractDetails(contractName) {\n  return nftContracts[contractName] || null;\n}\n---\n\n---\nFile: ./app/ClientProvider.js\n// app/ClientProvider.js\n'use client';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { WagmiProvider, createConfig, http } from 'wagmi';\nimport { mainnet } from 'wagmi/chains';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 30 * 60 * 1000, // 30 minutes\n      cacheTime: 60 * 60 * 1000, // 1 hour\n    },\n  },\n});\n\nconst config = createConfig({\n  chains: [mainnet],\n  transports: {\n    [mainnet.id]: http(`https://eth-mainnet.alchemyapi.io/v2/${process.env.NEXT_PUBLIC_ALCHEMY_API_KEY}`),\n  },\n});\n\nexport default function ClientProvider({ children }) {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n---\n\n---\nFile: ./postcss.config.mjs\n// This file is used to configure PostCSS, a tool for transforming CSS with JavaScript.\n\nconst config = {\n  plugins: ["tailwindcss"],\n};\nexport default config;\n---\n\n---\nFile: ./next.config.mjs\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nexport default nextConfig;\n\n---\n\n---\nFile: ./utils/Math.js\n// app/utils/Math.js\nexport function wdiv(a, b) {\n    if (BigInt(b) === 0n) return 0n; // Prevent division by zero\n    return (BigInt(a) * 10n ** 18n) / BigInt(b);\n  }\n---\n\n---\nFile: ./README.md\nThis is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n\n---\n\n---\nFile: ./components/HolderTable.js\n// components/HolderTable.js\nimport { memo } from 'react'; // Add memo import\nimport { motion } from 'framer-motion';\nimport { contractTiers } from "@/app/nft-contracts";\n\nconst rowVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: { opacity: 1, y: 0, transition: { duration: 0.3 } },\n};\n\nfunction HolderTable({ holders, contract, loading, totalShares }) {\n  // Filter out null/undefined holders and those without a wallet property\n  const safeHolders = Array.isArray(holders) ? holders.filter(h => h && h.wallet) : [];\n  const isAscendant = contract === 'ascendantNFT';\n\n  if (!safeHolders.length) {\n    if (loading) {\n      return (\n        <div className="overflow-x-auto w-full rounded-lg shadow-lg">\n          <table className="w-full bg-gray-800 text-white table-auto md:table-fixed">\n            <thead>\n              <tr className="bg-gradient-to-r from-blue-600 to-blue-800 text-sm md:text-base">\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[60px] md:w-[80px] rounded-tl-lg">Rank</th>\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[120px] md:w-[200px]">Wallet</th>\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">Total NFTs</th>\n                {isAscendant ? (\n                  <>\n                    <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">% Share of Shares</th>\n                    <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">Shares</th>\n                    <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">DAY8 Rewards</th>\n                    <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">DAY28 Rewards</th>\n                    <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">DAY90 Rewards</th>\n                  </>\n                ) : (\n                  <>\n                    <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">Reward %</th>\n                    <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">Total Multiplier</th>\n                    {Object.keys(contractTiers[contract] || {})\n                      .sort((a, b) => b - a)\n                      .map(tier => (\n                        <th key={tier} className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">\n                          {contractTiers[contract][tier].name}\n                        </th>\n                      ))}\n                  </>\n                )}\n              </tr>\n            </thead>\n            <tbody className="text-gray-300 text-xs md:text-sm">\n              {Array(5).fill().map((_, i) => (\n                <motion.tr\n                  key={i}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: i * 0.1, duration: 0.5 }}\n                  className="animate-pulse"\n                >\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                  {isAscendant ? (\n                    <>\n                      <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                      <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                      <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                      <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                      <td className="py-2 px-2 md:py-4 md}px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                    </>\n                  ) : (\n                    <>\n                      <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                      <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                      {Object.keys(contractTiers[contract] || {}).map(tier => (\n                        <td key={tier} className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700"><div className="h-4 bg-gray-600 rounded w-3/4"></div></td>\n                      ))}\n                    </>\n                  )}\n                </motion.tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n    return <div className="text-center text-gray-400 py-4 w-full">No holders found.</div>;\n  }\n\n  const tiers = contractTiers[contract];\n  if (!tiers) {\n    return <div className="text-center text-red-500 py-4 w-full">Error: Contract tiers not found for {contract}.</div>;\n  }\n\n  return (\n    <div className="overflow-x-auto w-full rounded-lg shadow-lg">\n      <table className="w-full bg-gray-800 text-white table-auto md:table-fixed">\n        <thead>\n          <tr className="bg-gradient-to-r from-blue-600 to-blue-800 text-sm md:text-base">\n            <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[60px] md:w-[80px] rounded-tl-lg">Rank</th>\n            <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[120px] md:w-[200px]">Wallet</th>\n            <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">Total NFTs</th>\n            {isAscendant ? (\n              <>\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">% Share of Shares</th>\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">Shares</th>\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">DAY8 Rewards</th>\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">DAY28 Rewards</th>\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">DAY90 Rewards</th>\n              </>\n            ) : (\n              <>\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">Reward %</th>\n                <th className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">Total Multiplier</th>\n                {Object.keys(tiers)\n                  .sort((a, b) => b - a)\n                  .map(tier => (\n                    <th key={tier} className="py-2 px-2 md:py-4 md:px-6 text-left font-semibold w-[80px] md:w-[120px]">\n                      {tiers[tier].name}\n                    </th>\n                  ))}\n              </>\n            )}\n          </tr>\n        </thead>\n        <tbody className="text-gray-300 text-xs md:text-sm">\n          {safeHolders.map((holder, index) => (\n            <motion.tr\n              key={holder.wallet}\n              variants={rowVariants}\n              initial="hidden"\n              animate="visible"\n              whileHover={{ scale: 1.02, backgroundColor: '#1e3a8a' }}\n              transition={{ delay: index * 0.05 }}\n              className={`transition-colors ${index % 2 === 0 ? "bg-gray-800" : "bg-gray-900"}`}\n            >\n              <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">{holder.rank}</td>\n              <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">\n                <a\n                  href={`https://etherscan.io/address/${holder.wallet}`}\n                  target="_blank"\n                  rel="noopener noreferrer"\n                  className="text-blue-400 hover:text-blue-300 hover:underline break-all"\n                >\n                  {holder.wallet.slice(0, 6)}...{holder.wallet.slice(-4)}\n                </a>\n              </td>\n              <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">{holder.total}</td>\n              {isAscendant ? (\n                <>\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">\n                    {totalShares ? ((holder.shares / totalShares) * 100).toFixed(2) : 'N/A'}%\n                  </td>\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">{(holder.shares / 1e18).toLocaleString()}</td>\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">{(holder.pendingDay8 / 1e18).toLocaleString()}</td>\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">{(holder.pendingDay28 / 1e18).toLocaleString()}</td>\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">{(holder.pendingDay90 / 1e18).toLocaleString()}</td>\n                </>\n              ) : (\n                <>\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">{holder.percentage.toFixed(2)}%</td>\n                  <td className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">{holder.displayMultiplierSum.toFixed(2)}</td>\n                  {Object.keys(tiers)\n                    .sort((a, b) => b - a)\n                    .map(tier => (\n                      <td key={tier} className="py-2 px-2 md:py-4 md:px-6 border-b border-gray-700">\n                        {holder.tiers?.[tier] || 0}\n                      </td>\n                    ))}\n                </>\n              )}\n            </motion.tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\n// Export as memoized component to reduce unnecessary re-renders\nexport default memo(HolderTable);\n---\n\n---\nFile: ./components/AuctionCard.js\n// components/AuctionCard.js\n'use client';\nimport { useState, useEffect } from 'react';\nimport { useFlareAuctionState } from '@/lib/auctions/flare';\n\nexport default function AuctionCard({ name, url, roiData, onClick }) {\n  console.log('[AuctionCard] Rendering for', name);\n  const { isMinting } = name === 'Flare' ? useFlareAuctionState() : { isMinting: false };\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    console.log('[AuctionCard] isModalOpen changed:', isModalOpen, 'for', name);\n  }, [isModalOpen, name]);\n\n  const openModal = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    console.log('[AuctionCard] openModal called for', name);\n    setIsModalOpen(true);\n    if (onClick) {\n      console.log('[AuctionCard] Triggering onClick for', name);\n      onClick(name, url, roiData);\n    }\n  };\n\n  const closeModal = (e) => {\n    if (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    console.log('[AuctionCard] closeModal called for', name);\n    setIsModalOpen(false);\n  };\n\n  const handleBackgroundClick = (e) => {\n    if (e.target === e.currentTarget) {\n      console.log('[AuctionCard] Closing modal due to background click for', name);\n      closeModal(e);\n    }\n  };\n\n  return (\n    <>\n      <div className="bg-gray-800 rounded-lg shadow-md p-6">\n        <button\n          onClick={openModal}\n          className="bg-blue-600 text-white text-xl font-semibold w-full p-2 rounded hover:bg-blue-700"\n        >\n          {name} Auction\n        </button>\n        {name === 'Flare' && isMinting && (\n          <p className="text-yellow-500 mt-2 text-sm font-medium">Paused (Minting Phase)</p>\n        )}\n        <p className="text-gray-400 mt-2 text-sm">\n          <a href={url} target="_blank" rel="noopener noreferrer" className="hover:underline">\n            {url}\n          </a>\n        </p>\n        {roiData && (\n          <div className="mt-2 text-sm text-orange-400">\n            {roiData.isLoading ? (\n              <p>Loading data...</p>\n            ) : roiData.hasError ? (\n              <p>Data unavailable</p>\n            ) : (\n              <>\n                {roiData.timeRemaining && <p>Time: {roiData.timeRemaining}</p>}\n                <p>ROI: {roiData.roi !== null ? `${roiData.roi}%` : 'N/A'}</p>\n                {roiData.currentFlarePerTitanX !== null && (\n                  <p>Auction: {roiData.currentFlarePerTitanX.toFixed(2)} FLARE/TX</p>\n                )}\n                {roiData.marketFlareTitanXPrice !== null && (\n                  <p>Market: {roiData.marketFlareTitanXPrice.toFixed(2)} FLARE/TX</p>\n                )}\n                {roiData.currentAscendPerTitanX !== null && (\n                  <p>Auction: {roiData.currentAscendPerTitanX.toFixed(2)} ASCEND/TX</p>\n                )}\n                {roiData.marketAscendTitanXPrice !== null && (\n                  <p>Market: {roiData.marketAscendTitanXPrice.toFixed(2)} ASCEND/TX</p>\n                )}\n              </>\n            )}\n          </div>\n        )}\n      </div>\n\n      {isModalOpen && (\n        <div\n          className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-[1000]"\n          onClick={handleBackgroundClick}\n        >\n          <div\n            className="bg-gray-900 rounded-lg p-4 w-full max-w-4xl h-[80vh] relative"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <button\n              onClick={closeModal}\n              className="absolute top-2 right-2 text-gray-300 hover:text-white bg-gray-800 rounded-full w-8 h-8 flex items-center justify-center z-[1010]"\n            >\n              ✕\n            </button>\n            <h2 className="text-2xl font-bold text-white mb-4">{name} Auction</h2>\n            {roiData && (\n              <div className="text-gray-300 mb-4">\n                {roiData.isLoading ? (\n                  <p>Loading data...</p>\n                ) : roiData.hasError ? (\n                  <p>Error loading data</p>\n                ) : (\n                  <>\n                    {roiData.timeRemaining && <p><strong>Time:</strong> {roiData.timeRemaining}</p>}\n                    <p><strong>ROI:</strong> {roiData.roi !== null ? `${roiData.roi}%` : 'N/A'}</p>\n                    {roiData.currentFlarePerTitanX !== null && (\n                      <p><strong>Auction FLARE/TX:</strong> {roiData.currentFlarePerTitanX.toFixed(2)}</p>\n                    )}\n                    {roiData.marketFlareTitanXPrice !== null && (\n                      <p><strong>Market FLARE/TX:</strong> {roiData.marketFlareTitanXPrice.toFixed(2)}</p>\n                    )}\n                    {roiData.currentAscendPerTitanX !== null && (\n                      <p><strong>Auction ASCEND/TX:</strong> {roiData.currentAscendPerTitanX.toFixed(2)}</p>\n                    )}\n                    {roiData.marketAscendTitanXPrice !== null && (\n                      <p><strong>Market ASCEND/TX:</strong> {roiData.marketAscendTitanXPrice.toFixed(2)}</p>\n                    )}\n                    {roiData.deviationStatus && (\n                      <p><strong>Price Stability:</strong> {roiData.deviationStatus}</p>\n                    )}\n                    {roiData.mintCycle && (\n                      <p>\n                        <strong>Mint Cycle:</strong>{' '}\n                        {roiData.mintCycle.isMinting\n                          ? `Cycle ${roiData.mintCycle.currentCycle} (Minting)`\n                          : `Cycle ${roiData.mintCycle.currentCycle} (Ended)`}\n                      </p>\n                    )}\n                  </>\n                )}\n              </div>\n            )}\n            <iframe\n              src={url}\n              className="w-full h-[calc(100%-8rem)] border-0 rounded"\n              title={`${name} Auction`}\n              allowFullScreen\n              onLoad={() => console.log('[AuctionCard] Iframe loaded for', name)}\n              onError={(e) => console.error('[AuctionCard] Iframe error for', name, e)}\n            />\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n---\n\n---\nFile: ./components/LoadingIndicator.js\n// app/components/LoadingIndicator.js\nimport { motion } from 'framer-motion';\n\nexport default function LoadingIndicator({ status }) {\n  return (\n    <div className="flex flex-col items-center justify-center gap-3 animate-fade-in w-full flex-1">\n      <motion.svg\n        className="h-6 w-6 sm:h-8 sm:w-8 text-blue-400"\n        animate={{ scale: [1, 1.2, 1], rotate: 360 }}\n        transition={{ duration: 1, repeat: Infinity, ease: 'easeInOut' }}\n        xmlns="http://www.w3.org/2000/svg"\n        fill="none"\n        viewBox="0 0 24 24"\n      >\n        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />\n        <path\n          className="opacity-75"\n          fill="currentColor"\n          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"\n        />\n      </motion.svg>\n      <p className="text-sm sm:text-base text-gray-300">{status}</p>\n    </div>\n  );\n}\n---\n\n---\nFile: ./components/NFTPage.js\n// components/NFTPage.js\n'use client';\nimport { useState, useEffect } from 'react';\nimport HolderTable from '@/components/HolderTable';\nimport LoadingIndicator from '@/components/LoadingIndicator';\nimport { contractDetails } from '@/app/nft-contracts';\nimport { useNFTStore } from '@/app/store';\n\nexport default function NFTPage({ contractKey }) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const { name, apiEndpoint } = contractDetails[contractKey] || {};\n  const { getCache, setCache } = useNFTStore();\n\n  useEffect(() => {\n    async function fetchAllHolders() {\n      if (!apiEndpoint) {\n        setError('Invalid contract configuration');\n        setLoading(false);\n        return;\n      }\n\n      const cachedData = getCache(contractKey);\n      if (cachedData) {\n        setData(cachedData);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        console.log(`[NFTPage] Starting fetch for ${contractKey} at ${apiEndpoint}`);\n        let allHolders = [];\n        let totalTokens = 0;\n        let totalLockedAscendant = 0;\n        let totalShares = 0;\n        let toDistributeDay8 = 0;\n        let toDistributeDay28 = 0;\n        let toDistributeDay90 = 0;\n        let pendingRewards = 0;\n        let page = 0;\n        let totalPages = Infinity;\n        const pageSize = 1000;\n\n        while (page < totalPages) {\n          let attempts = 0;\n          const maxAttempts = 3;\n          let success = false;\n\n          while (attempts < maxAttempts && !success) {\n            try {\n              console.log(`[NFTPage] Fetching ${contractKey} page ${page}`);\n              const res = await fetch(`${apiEndpoint}?page=${page}&pageSize=${pageSize}`, {\n                signal: AbortSignal.timeout(30000),\n              });\n              if (!res.ok) {\n                const errorText = await res.text();\n                throw new Error(`Page ${page} failed with status: ${res.status} - ${errorText}`);\n              }\n\n              const json = await res.json();\n              allHolders = allHolders.concat(json.holders || []);\n              totalTokens = json.totalTokens || totalTokens;\n              totalLockedAscendant = json.totalLockedAscendant || totalLockedAscendant;\n              totalShares = json.totalShares || totalShares;\n              toDistributeDay8 = json.toDistributeDay8 || toDistributeDay8;\n              toDistributeDay28 = json.toDistributeDay28 || toDistributeDay28;\n              toDistributeDay90 = json.toDistributeDay90 || toDistributeDay90;\n              pendingRewards = json.pendingRewards || pendingRewards;\n              totalPages = json.totalPages || 1;\n              page++;\n              success = true;\n              if (!json.holders || json.holders.length === 0) break;\n            } catch (err) {\n              attempts++;\n              if (err.message.includes('Rate limit') || err.name === 'TimeoutError') {\n                console.log(`[NFTPage] Retry ${attempts} for ${contractKey} page ${page} due to: ${err.message}`);\n                await new Promise(resolve => setTimeout(resolve, 1000 * attempts));\n              } else {\n                throw err;\n              }\n            }\n          }\n          if (!success) {\n            throw new Error(`Failed to fetch page ${page} for ${contractKey} after ${maxAttempts} attempts`);\n          }\n        }\n\n        const uniqueHoldersMap = new Map();\n        allHolders.forEach(holder => {\n          if (holder && holder.wallet) uniqueHoldersMap.set(holder.wallet, holder);\n        });\n        const uniqueHolders = Array.from(uniqueHoldersMap.values());\n        console.log(`[NFTPage] Total Unique ${contractKey} Holders: ${uniqueHolders.length}`);\n\n        const totalMultiplierSum = uniqueHolders.reduce((sum, h) => sum + (h.multiplierSum || 0), 0);\n        if (!totalTokens && uniqueHolders.length > 0) {\n          totalTokens = uniqueHolders.reduce((sum, h) => sum + (h.total || 0), 0);\n        }\n\n        uniqueHolders.sort((a, b) => (b.multiplierSum || 0) - (a.multiplierSum || 0) || (b.total || 0) - (a.total || 0));\n        uniqueHolders.forEach((holder, index) => {\n          holder.rank = index + 1;\n          holder.percentage = totalMultiplierSum > 0 ? (holder.multiplierSum / totalMultiplierSum) * 100 : 0;\n        });\n\n        const fetchedData = {\n          holders: uniqueHolders,\n          totalTokens,\n          totalLockedAscendant,\n          totalShares,\n          toDistributeDay8,\n          toDistributeDay28,\n          toDistributeDay90,\n          pendingRewards,\n          totalMultiplierSum,\n        };\n\n        setCache(contractKey, fetchedData);\n        setData(fetchedData);\n        setLoading(false);\n      } catch (err) {\n        console.error('[NFTPage] Fetch Error:', err);\n        setError(`Failed to load ${name} holders: ${err.message}. Try refreshing later (Alchemy limit possible).`);\n        setLoading(false);\n      }\n    }\n\n    fetchAllHolders();\n  }, [contractKey, name, apiEndpoint, getCache, setCache]);\n\n  const renderSummary = () => {\n    if (!data) return null;\n\n    const totalMultiplierSum = data.totalMultiplierSum || 0;\n    const totalTokens = data.totalTokens || 0;\n\n    if (contractKey === 'ascendantNFT') {\n      return (\n        <>\n          <h2 className="text-2xl font-semibold mb-2">Summary</h2>\n          <p>Number of Unique Wallets Holding NFTs: <span className="font-bold">{data.holders.length}</span></p>\n          <p>Total Number of Active NFTs in Circulation: <span className="font-bold">{totalTokens.toLocaleString()}</span></p>\n          <p>Total Locked Ascendant: <span className="font-bold">{(data.totalLockedAscendant / 1e18 || 0).toLocaleString()}</span></p>\n          <p>Total Shares: <span className="font-bold">{(data.totalShares / 1e18 || 0).toLocaleString()}</span></p>\n          <p>Total Pending DragonX Rewards: <span className="font-bold">{(data.pendingRewards / 1e18 || 0).toLocaleString()}</span></p>\n          <p>Pending DAY8 Rewards: <span className="font-bold">{(data.toDistributeDay8 / 1e18 || 0).toLocaleString()}</span></p>\n          <p>Pending DAY28 Rewards: <span className="font-bold">{(data.toDistributeDay28 / 1e18 || 0).toLocaleString()}</span></p>\n          <p>Pending DAY90 Rewards: <span className="font-bold">{(data.toDistributeDay90 / 1e18 || 0).toLocaleString()}</span></p>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h2 className="text-2xl font-semibold mb-2">Summary</h2>\n          <p>Number of Unique Wallets Holding NFTs: <span className="font-bold">{data.holders.length}</span></p>\n          <p>Total Number of Active NFTs in Circulation: <span className="font-bold">{totalTokens.toLocaleString()}</span></p>\n          <p>Total Multiplier Sum: <span className="font-bold">{totalMultiplierSum.toLocaleString()}</span></p>\n        </>\n      );\n    }\n  };\n\n  return (\n    <div className="min-h-screen bg-gray-900 text-white p-6 flex flex-col items-center">\n      <h1 className="text-4xl font-bold mb-6">{name || 'Unknown Contract'} Holders</h1>\n      {loading ? (\n        <LoadingIndicator status={`Loading all ${name || 'contract'} holders...`} />\n      ) : error ? (\n        <p className="text-red-500 text-lg">Error: {error}</p>\n      ) : !data ? (\n        <p className="text-gray-400 text-lg">No data available for {name || 'this contract'}.</p>\n      ) : (\n        <div className="w-full max-w-6xl">\n          <div className="mb-6 p-4 bg-gray-800 rounded-lg shadow">{renderSummary()}</div>\n          <HolderTable\n            holders={data.holders || []}\n            contract={contractKey}\n            loading={loading}\n            totalShares={contractKey === 'ascendantNFT' ? data.totalShares : undefined}\n          />\n          <div className="mt-8">\n            <h3 className="text-xl font-bold mb-2">Raw Data:</h3>\n            <pre className="text-sm bg-gray-700 p-4 rounded max-h-96 overflow-auto border-2 border-red-500">\n              {JSON.stringify(data, null, 2)}\n            </pre>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n---\n\n---\nFile: ./components/SearchResultsModal.js\n// components/SearchResultsModal.js\n'use client';\nimport { motion } from 'framer-motion';\nimport HolderTable from './HolderTable';\n\nexport default function SearchResultsModal({ searchResult, searchAddress, closeModal, handleBackgroundClick }) {\n  const modalVariants = {\n    hidden: { opacity: 0, y: -50 },\n    visible: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: -50 },\n  };\n\n  return (\n    <div\n      className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4"\n      onClick={handleBackgroundClick}\n    >\n      <motion.div\n        className="bg-gray-800 text-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto"\n        variants={modalVariants}\n        initial="hidden"\n        animate="visible"\n        exit="exit"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className="flex justify-between items-center mb-4">\n          <h2 className="text-2xl font-bold">Search Results for {searchAddress}</h2>\n          <button onClick={closeModal} className="text-gray-400 hover:text-white text-2xl">\n            &times;\n          </button>\n        </div>\n\n        {Object.keys(searchResult).length === 0 ? (\n          <p className="text-gray-400">No results available.</p>\n        ) : (\n          Object.entries(searchResult).map(([contract, data]) => (\n            <div key={contract} className="mb-6">\n              <h3 className="text-xl font-semibold mb-2">{contractDetails[contract]?.name || contract}</h3>\n              {data === null ? (\n                <p className="text-gray-400">Wallet not found in this collection.</p>\n              ) : data.error ? (\n                <p className="text-red-500">Error: {data.error}</p>\n              ) : data.message ? (\n                <p className="text-gray-400">{data.message}</p>\n              ) : (\n                <HolderTable\n                  holders={[data]}\n                  contract={contract}\n                  loading={false}\n                  totalShares={data.totalShares} // Pass totalShares from search result\n                />\n              )}\n            </div>\n          ))\n        )}\n      </motion.div>\n    </div>\n  );\n}\n\nconst contractDetails = {\n  element280: { name: 'Element280' },\n  element369: { name: 'Element369' },\n  staxNFT: { name: 'Stax' },\n  ascendantNFT: { name: 'Ascendant' },\n  e280: { name: 'E280' },\n};\n---\n\n---\nFile: ./components/Navbar.jsx\n// components/Navbar.jsx\n'use client';\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Link from 'next/link';\n\nfunction Navbar() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isNFTDropdownOpen, setIsNFTDropdownOpen] = useState(false);\n\n  const menuVariants = {\n    hidden: { opacity: 0, y: -20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.3, ease: 'easeOut', staggerChildren: 0.1 },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: -10 },\n    visible: { opacity: 1, y: 0 },\n  };\n\n  const dropdownVariants = {\n    hidden: { opacity: 0, height: 0 },\n    visible: { opacity: 1, height: 'auto', transition: { duration: 0.2 } },\n  };\n\n  const navItems = [\n    { name: 'Home', href: '/' },\n    { name: 'Auctions', href: '/auctions' },\n    { name: 'Mining', href: '/mining' },\n    {\n      name: 'NFT',\n      href: '/nft',\n      subItems: [\n        {\n          name: 'ETH',\n          subItems: [\n            { name: 'Element280', href: '/nft/ETH/Element280' },\n            { name: 'Element369', href: '/nft/ETH/Element369' },\n            { name: 'Stax', href: '/nft/ETH/Stax' },\n            { name: 'Ascendant', href: '/nft/ETH/Ascendant' },\n          ],\n        },\n        {\n          name: 'BASE',\n          subItems: [\n            { name: 'E280', href: '/nft/BASE/E280' },\n          ],\n        },\n      ],\n    },\n    { name: 'About', href: '/about' },\n  ];\n\n  return (\n    <nav className="bg-gradient-to-r from-gray-900 to-gray-800 text-white p-4 sticky top-0 z-50 shadow-md">\n      <div className="max-w-7xl mx-auto flex justify-between items-center">\n        {/* Logo */}\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5 }}\n          className="text-2xl font-bold"\n        >\n          <Link href="/">TitanXUtils</Link>\n        </motion.div>\n\n        {/* Desktop Links */}\n        <div className="hidden md:flex space-x-6 items-center">\n          {navItems.map((item) => (\n            <motion.div\n              key={item.name}\n              className="relative text-gray-300 hover:text-white transition-colors duration-200 group"\n              whileHover={{ scale: 1.1, color: '#f97316' }}\n              whileTap={{ scale: 0.95 }}\n            >\n              {item.external ? (\n                <a href={item.href} target="_blank" rel="noopener noreferrer">\n                  {item.name}\n                </a>\n              ) : (\n                <Link href={item.href}>{item.name}</Link>\n              )}\n              {item.subItems && (\n                <motion.div\n                  className="absolute left-0 mt-2 w-48 bg-gray-800 rounded-md shadow-lg hidden group-hover:block"\n                  variants={dropdownVariants}\n                  initial="hidden"\n                  whileHover="visible"\n                >\n                  {item.subItems.map((subItem) => (\n                    <div key={subItem.name} className="py-1">\n                      <div className="px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white">\n                        {subItem.href ? (\n                          <Link href={subItem.href}>{subItem.name}</Link>\n                        ) : (\n                          <span>{subItem.name}</span>\n                        )}\n                      </div>\n                      {subItem.subItems && (\n                        <div className="pl-4">\n                          {subItem.subItems.map((nestedItem) => (\n                            <div\n                              key={nestedItem.name}\n                              className="px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white"\n                            >\n                              <Link href={nestedItem.href}>\n                                {nestedItem.name}\n                              </Link>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </motion.div>\n              )}\n            </motion.div>\n          ))}\n        </div>\n\n        {/* Mobile Menu Toggle */}\n        <button\n          className="md:hidden p-2 focus:outline-none"\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          <motion.svg\n            className="w-6 h-6"\n            fill="none"\n            stroke="currentColor"\n            viewBox="0 0 24 24"\n            animate={{ rotate: isOpen ? 90 : 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <path\n              strokeLinecap="round"\n              strokeLinejoin="round"\n              strokeWidth="2"\n              d={isOpen ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16M4 18h16'}\n            />\n          </motion.svg>\n        </button>\n      </div>\n\n      {/* Mobile Menu */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            variants={menuVariants}\n            initial="hidden"\n            animate="visible"\n            exit="hidden"\n            className="md:hidden mt-4 space-y-2"\n          >\n            {navItems.map((item) => (\n              <motion.div\n                key={item.name}\n                variants={itemVariants}\n                className="block py-2 px-4 text-gray-300 hover:text-white hover:bg-gray-700 rounded-md transition-colors duration-200"\n              >\n                {item.subItems ? (\n                  <>\n                    <div\n                      className="flex justify-between items-center cursor-pointer"\n                      onClick={() =>\n                        item.name === 'NFT' &&\n                        setIsNFTDropdownOpen(!isNFTDropdownOpen)\n                      }\n                    >\n                      {item.name}\n                      {item.name === 'NFT' && (\n                        <motion.svg\n                          className="w-4 h-4"\n                          fill="none"\n                          stroke="currentColor"\n                          viewBox="0 0 24 24"\n                          animate={{ rotate: isNFTDropdownOpen ? 180 : 0 }}\n                        >\n                          <path\n                            strokeLinecap="round"\n                            strokeLinejoin="round"\n                            strokeWidth="2"\n                            d="M19 9l-7 7-7-7"\n                          />\n                        </motion.svg>\n                      )}\n                    </div>\n                    {item.name === 'NFT' && isNFTDropdownOpen && (\n                      <motion.div\n                        variants={dropdownVariants}\n                        initial="hidden"\n                        animate="visible"\n                        exit="hidden"\n                        className="pl-4 space-y-2"\n                      >\n                        {item.subItems.map((subItem) => (\n                          <div key={subItem.name}>\n                            <div className="py-2">\n                              {subItem.href ? (\n                                <Link href={subItem.href} onClick={() => setIsOpen(false)}>\n                                  {subItem.name}\n                                </Link>\n                              ) : (\n                                <span>{subItem.name}</span>\n                              )}\n                            </div>\n                            {subItem.subItems && (\n                              <div className="pl-4 space-y-2">\n                                {subItem.subItems.map((nestedItem) => (\n                                  <div\n                                    key={nestedItem.name}\n                                    className="py-2"\n                                    onClick={() => setIsOpen(false)}\n                                  >\n                                    <Link href={nestedItem.href}>\n                                      {nestedItem.name}\n                                    </Link>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </motion.div>\n                    )}\n                  </>\n                ) : item.external ? (\n                  <a\n                    href={item.href}\n                    target="_blank"\n                    rel="noopener noreferrer"\n                    onClick={() => setIsOpen(false)}\n                  >\n                    {item.name}\n                  </a>\n                ) : (\n                  <Link href={item.href} onClick={() => setIsOpen(false)}>\n                    {item.name}\n                  </Link>\n                )}\n              </motion.div>\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </nav>\n  );\n}\n\nexport default Navbar;\n---\n\n---\nFile: ./.gitignore\n# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.*\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/versions\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n/dist/\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n*.log\n\n# env files (can opt-in for committing if needed)\n.env*\n.env\n\n# vercel\n.vercel\n\n# typescript (optional if no TS)\n*.tsbuildinfo\nnext-env.d.ts\n---\n\n---\nFile: ./scripts/testFlareMinting.js\n// scripts/testFlareMinting.js\nimport { createPublicClient, http } from 'viem';\nimport { mainnet } from 'viem/chains';\nimport { flareMintingABI } from '../app/token_contracts.js';\nimport dotenv from 'dotenv';\n\n// Load environment variables from .env.local\ndotenv.config({ path: '.env.local' });\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(`https://eth-mainnet.g.alchemy.com/v2/${process.env.NEXT_PUBLIC_ALCHEMY_API_KEY}`),\n});\n\nasync function testFlareMinting() {\n  try {\n    const mintCycle = await client.readContract({\n      address: '0x9983eF6Af4DE8fE58C45f6DC54Cf5Ad349431A82',\n      abi: flareMintingABI,\n      functionName: 'getCurrentMintCycle',\n    });\n    console.log('Mint Cycle:', {\n      currentCycle: Number(mintCycle[0]),\n      startsAt: Number(mintCycle[1]),\n      endsAt: Number(mintCycle[2]),\n      isMinting: mintCycle[2] > Math.floor(Date.now() / 1000),\n    });\n\n    const startTimestamp = await client.readContract({\n      address: '0x9983eF6Af4DE8fE58C45f6DC54Cf5Ad349431A82',\n      abi: flareMintingABI,\n      functionName: 'startTimestamp',\n    });\n    console.log('FlareMinting startTimestamp:', Number(startTimestamp));\n  } catch (error) {\n    console.error('Error querying FlareMinting:', error);\n  }\n}\n\ntestFlareMinting();\n---\n\n---\nFile: ./lib/wagmi.js\n// @/lib/wagmi.js\nimport { http, createConfig } from 'wagmi';\nimport { mainnet } from 'wagmi/chains';\n\nexport const config = createConfig({\n  chains: [mainnet],\n  transports: {\n    [mainnet.id]: http(`https://eth-mainnet.g.alchemy.com/v2/${process.env.ALCHEMY_API_KEY}`),\n  },\n});\n---\n\n---\nFile: ./lib/store.js\n// lib/store.js\n'use client';\nimport { create } from 'zustand';\n\nexport const useFlareAuctionStore = create((set) => ({\n  isFlareAuctionDay: false,\n  nextFlareAuctionStart: null,\n  setFlareAuctionDay: (isFlareAuctionDay, nextFlareAuctionStart) =>\n    set({ isFlareAuctionDay, nextFlareAuctionStart }),\n}));\n---\n\n---\nFile: ./lib/auctions/flare.js\n// lib/auctions/flare.js\n'use client';\nimport { useEffect, useState } from 'react';\nimport { useReadContract } from 'wagmi';\nimport { formatEther } from 'viem';\nimport { tokenContracts, auctionABI, flareTokenABI, uniswapPoolABI, uniswapV2PoolABI } from '@/app/token_contracts';\n\nexport function useFlareROI() {\n  const [retryCount, setRetryCount] = useState(0);\n  const maxRetries = 3;\n  const maxDays = 64;\n\n  const auctionConfig = { address: tokenContracts.FLARE_AUCTION.address, abi: auctionABI, chainId: 1 };\n  const flareTokenConfig = { address: tokenContracts.FLARE.address, abi: flareTokenABI, chainId: 1 };\n  const flareX28Config = { address: tokenContracts.FLARE_X28.address, abi: uniswapV2PoolABI, chainId: 1 };\n  const x28TitanXConfig = { address: tokenContracts.X28_TITANX.address, abi: uniswapPoolABI, chainId: 1 };\n  const titanXWethConfig = { address: tokenContracts.TITANX_WETH.address, abi: uniswapPoolABI, chainId: 1 };\n  const wethUsdcConfig = { address: tokenContracts.WETH_USDC.address, abi: uniswapPoolABI, chainId: 1 };\n\n  const { data: flareX28PoolAddress, isLoading: flareX28PoolLoading, isError: flareX28PoolError, error: flareX28PoolErrorDetails } = useReadContract({\n    ...flareTokenConfig,\n    functionName: 'x28FlarePool',\n  });\n  const flareX28PoolConfig = { address: flareX28PoolAddress || tokenContracts.FLARE_X28.address, abi: uniswapV2PoolABI, chainId: 1 };\n\n  const { data: startTimestamp, isLoading: startLoading, isError: startError, error: startErrorDetails } = useReadContract({\n    ...auctionConfig,\n    functionName: 'startTimestamp',\n  });\n\n  let currentDay = startTimestamp ? Math.floor((Date.now() / 1000 - Number(startTimestamp)) / (24 * 60 * 60)) : 0;\n  currentDay = Math.max(0, Math.min(currentDay, maxDays - 1));\n\n  const { data: dailyStats, isLoading: statsLoading, isError: statsError, error: statsErrorDetails } = useReadContract({\n    ...auctionConfig,\n    functionName: 'dailyStats',\n    args: [currentDay],\n  });\n\n  const { data: flareX28Reserves, isLoading: flareX28ReservesLoading, isError: flareX28ReservesError, error: flareX28ReservesErrorDetails } = useReadContract({\n    ...flareX28PoolConfig,\n    functionName: 'getReserves',\n  });\n\n  const { data: flareX28Token0, isLoading: flareX28Token0Loading, isError: flareX28Token0Error, error: flareX28Token0ErrorDetails } = useReadContract({\n    ...flareX28PoolConfig,\n    functionName: 'token0',\n  });\n\n  const { data: x28TitanXSlot0, isLoading: x28TitanXSlot0Loading, isError: x28TitanXSlot0Error, error: x28TitanXSlot0ErrorDetails } = useReadContract({\n    ...x28TitanXConfig,\n    functionName: 'slot0',\n    cacheTime: 0,\n  });\n\n  const { data: x28TitanXToken0, isLoading: x28TitanXToken0Loading, isError: x28TitanXToken0Error, error: x28TitanXToken0ErrorDetails } = useReadContract({\n    ...x28TitanXConfig,\n    functionName: 'token0',\n  });\n\n  const { data: titanXWethSlot0, isLoading: titanXWethSlot0Loading, isError: titanXWethSlot0Error, error: titanXWethSlot0ErrorDetails } = useReadContract({\n    ...titanXWethConfig,\n    functionName: 'slot0',\n    cacheTime: 0,\n  });\n\n  const { data: titanXWethToken0, isLoading: titanXWethToken0Loading, isError: titanXWethToken0Error, error: titanXWethToken0ErrorDetails } = useReadContract({\n    ...titanXWethConfig,\n    functionName: 'token0',\n  });\n\n  const { data: wethUsdcSlot0, isLoading: wethUsdcSlot0Loading, isError: wethUsdcSlot0Error, error: wethUsdcSlot0ErrorDetails } = useReadContract({\n    ...wethUsdcConfig,\n    functionName: 'slot0',\n    cacheTime: 0,\n  });\n\n  const { data: wethUsdcToken0, isLoading: wethUsdcToken0Loading, isError: wethUsdcToken0Error, error: wethUsdcToken0ErrorDetails } = useReadContract({\n    ...wethUsdcConfig,\n    functionName: 'token0',\n  });\n\n  const coreLoading = startLoading || statsLoading || flareX28ReservesLoading || flareX28Token0Loading || x28TitanXSlot0Loading || x28TitanXToken0Loading || flareX28PoolLoading;\n  const usdLoading = titanXWethSlot0Loading || titanXWethToken0Loading || wethUsdcSlot0Loading || wethUsdcToken0Loading;\n  const coreError = startError || statsError || flareX28ReservesError || flareX28Token0Error || x28TitanXSlot0Error || x28TitanXToken0Error || flareX28PoolError;\n  const usdError = titanXWethSlot0Error || titanXWethToken0Error || wethUsdcSlot0Error || wethUsdcToken0Error;\n\n  const isLoading = coreLoading || usdLoading;\n  const hasError = coreError || usdError;\n\n  useEffect(() => {\n    if (coreError && retryCount < maxRetries) {\n      console.error(`[FlareROI] Retrying due to core error, attempt ${retryCount + 1}`, {\n        startError: startErrorDetails?.message,\n        statsError: statsErrorDetails?.message,\n        flareX28ReservesError: flareX28ReservesErrorDetails?.message,\n        flareX28Token0Error: flareX28Token0ErrorDetails?.message,\n        x28TitanXSlot0Error: x28TitanXSlot0ErrorDetails?.message,\n        x28TitanXToken0Error: x28TitanXToken0ErrorDetails?.message,\n        flareX28PoolError: flareX28PoolErrorDetails?.message,\n      });\n      setTimeout(() => setRetryCount(retryCount + 1), 2000);\n    } else if (!coreError && retryCount > 0) {\n      setRetryCount(0);\n    }\n  }, [coreError, retryCount, startErrorDetails, statsErrorDetails, flareX28ReservesErrorDetails, flareX28Token0ErrorDetails, x28TitanXSlot0ErrorDetails, x28TitanXToken0ErrorDetails, flareX28PoolErrorDetails]);\n\n  const getPoolPrice = (reservesOrSlot0, token0Address, token1Address, poolAddress, isV3 = false) => {\n    if (!reservesOrSlot0) return { price: null, description: 'No data available' };\n    if (!isV3 && Array.isArray(reservesOrSlot0) && reservesOrSlot0.length >= 2) {\n      const reserve0 = Number(formatEther(BigInt(reservesOrSlot0[0])));\n      const reserve1 = Number(formatEther(BigInt(reservesOrSlot0[1])));\n      if (reserve0 === 0 || reserve1 === 0) return { price: null, description: 'Zero reserves' };\n      const price = reserve1 / reserve0; // token1/token0\n      return { price, description: `${token1Address}/${token0Address} from ${poolAddress}` };\n    } else if (isV3 && Array.isArray(reservesOrSlot0) && reservesOrSlot0.length >= 1) {\n      const sqrtPriceX96 = BigInt(reservesOrSlot0[0]);\n      const sqrtPrice = Number(sqrtPriceX96) / (2 ** 96);\n      let price = sqrtPrice * sqrtPrice; // token1/token0\n      const isToken0USDC = token0Address?.toLowerCase() === tokenContracts.USDC.address.toLowerCase();\n      const isToken1USDC = token1Address?.toLowerCase() === tokenContracts.USDC.address.toLowerCase();\n      if (isToken0USDC) price = 1 / price;\n      else if (isToken1USDC) price = price;\n      return { price, description: `${token1Address}/${token0Address} from ${poolAddress}` };\n    }\n    return { price: null, description: 'Invalid data' };\n  };\n\n  let auctionFlarePerTitanX = null;\n  let marketFlarePerTitanX = null;\n  let flarePerX28 = null;\n  let roi = null;\n  let status = 'loading';\n\n  if (!coreLoading && !coreError && flareX28Reserves && flareX28Token0 && x28TitanXSlot0 && x28TitanXToken0 && dailyStats && flareX28PoolAddress) {\n    const isFlareToken0 = flareX28Token0.toLowerCase() === tokenContracts.FLARE.address.toLowerCase();\n    const flareX28PriceInfo = getPoolPrice(flareX28Reserves, flareX28Token0, tokenContracts.X28.address, flareX28PoolAddress, false);\n    flarePerX28 = isFlareToken0 ? flareX28PriceInfo.price : flareX28PriceInfo.price ? 1 / flareX28PriceInfo.price : null;\n\n    const isX28Token0 = x28TitanXToken0.toLowerCase() === tokenContracts.X28.address.toLowerCase();\n    const x28TitanXPriceInfo = getPoolPrice(x28TitanXSlot0, x28TitanXToken0, tokenContracts.TITANX.address, x28TitanXConfig.address, true);\n    const x28PerTitanX = isX28Token0 ? (x28TitanXPriceInfo.price ? 1 / x28TitanXPriceInfo.price : null) : x28TitanXPriceInfo.price;\n\n    if (flarePerX28 && x28PerTitanX) {\n      marketFlarePerTitanX = flarePerX28 * x28PerTitanX;\n    }\n\n    const flareEmitted = dailyStats[2] ? Number(formatEther(BigInt(dailyStats[2]))) : 0;\n    const titanXDeposited = dailyStats[0] ? Number(formatEther(BigInt(dailyStats[0]))) : 0;\n    auctionFlarePerTitanX = titanXDeposited > 0 ? flareEmitted / titanXDeposited : null;\n\n    roi = auctionFlarePerTitanX && marketFlarePerTitanX ? ((auctionFlarePerTitanX / marketFlarePerTitanX) * 100).toFixed(2) : null;\n    status = roi ? 'success' : 'no_data';\n  } else if (hasError) {\n    status = 'error';\n  }\n\n  return {\n    auctionFlarePerTitanX,\n    marketFlarePerTitanX,\n    flarePerX28,\n    roi,\n    isLoading,\n    hasError,\n    status,\n  };\n}\n---\n\n---\nFile: ./lib/auctions/ascendant.js\n// lib/auctions/ascendant.js\n'use client';\nimport { useEffect, useState } from 'react';\nimport { useReadContract } from 'wagmi';\nimport { formatEther } from 'viem';\nimport { tokenContracts, auctionABI, uniswapPoolABI } from '@/app/token_contracts';\n\nexport function useAscendantROI() {\n  const [retryCount, setRetryCount] = useState(0);\n  const maxRetries = 3;\n  const maxDays = 64;\n\n  const auctionConfig = { address: tokenContracts.ASCENDANT_AUCTION.address, abi: auctionABI, chainId: 1 };\n  const ascendDragonXConfig = { address: tokenContracts.ASCENDANT_DRAGONX.address, abi: uniswapPoolABI, chainId: 1 };\n  const dragonXTitanXConfig = { address: tokenContracts.DRAGONX_TITANX.address, abi: uniswapPoolABI, chainId: 1 };\n  const titanXWethConfig = { address: tokenContracts.TITANX_WETH.address, abi: uniswapPoolABI, chainId: 1 };\n  const wethUsdcConfig = { address: tokenContracts.WETH_USDC.address, abi: uniswapPoolABI, chainId: 1 };\n\n  const { data: startTimestamp, isLoading: startLoading, isError: startError, error: startErrorDetails } = useReadContract({\n    ...auctionConfig,\n    functionName: 'startTimestamp',\n  });\n\n  let currentDay = startTimestamp ? Math.floor((Date.now() / 1000 - Number(startTimestamp)) / (24 * 60 * 60)) : 0;\n  currentDay = Math.max(0, Math.min(currentDay, maxDays - 1));\n\n  const { data: dailyStats, isLoading: statsLoading, isError: statsError, error: statsErrorDetails } = useReadContract({\n    ...auctionConfig,\n    functionName: 'dailyStats',\n    args: [currentDay],\n  });\n\n  const { data: ascendDragonXSlot0, isLoading: ascendDragonXSlot0Loading, isError: ascendDragonXSlot0Error, error: ascendDragonXSlot0ErrorDetails } = useReadContract({\n    ...ascendDragonXConfig,\n    functionName: 'slot0',\n    cacheTime: 0,\n  });\n\n  const { data: ascendDragonXToken0, isLoading: ascendDragonXToken0Loading, isError: ascendDragonXToken0Error, error: ascendDragonXToken0ErrorDetails } = useReadContract({\n    ...ascendDragonXConfig,\n    functionName: 'token0',\n  });\n\n  const { data: dragonXTitanXSlot0, isLoading: dragonXTitanXSlot0Loading, isError: dragonXTitanXSlot0Error, error: dragonXTitanXSlot0ErrorDetails } = useReadContract({\n    ...dragonXTitanXConfig,\n    functionName: 'slot0',\n    cacheTime: 0,\n  });\n\n  const { data: dragonXTitanXToken0, isLoading: dragonXTitanXToken0Loading, isError: dragonXTitanXToken0Error, error: dragonXTitanXToken0ErrorDetails } = useReadContract({\n    ...dragonXTitanXConfig,\n    functionName: 'token0',\n  });\n\n  const { data: titanXWethSlot0, isLoading: titanXWethSlot0Loading, isError: titanXWethSlot0Error, error: titanXWethSlot0ErrorDetails } = useReadContract({\n    ...titanXWethConfig,\n    functionName: 'slot0',\n    cacheTime: 0,\n  });\n\n  const { data: titanXWethToken0, isLoading: titanXWethToken0Loading, isError: titanXWethToken0Error, error: titanXWethToken0ErrorDetails } = useReadContract({\n    ...titanXWethConfig,\n    functionName: 'token0',\n  });\n\n  const { data: wethUsdcSlot0, isLoading: wethUsdcSlot0Loading, isError: wethUsdcSlot0Error, error: wethUsdcSlot0ErrorDetails } = useReadContract({\n    ...wethUsdcConfig,\n    functionName: 'slot0',\n    cacheTime: 0,\n  });\n\n  const { data: wethUsdcToken0, isLoading: wethUsdcToken0Loading, isError: wethUsdcToken0Error, error: wethUsdcToken0ErrorDetails } = useReadContract({\n    ...wethUsdcConfig,\n    functionName: 'token0',\n  });\n\n  const coreLoading = startLoading || statsLoading || ascendDragonXSlot0Loading || ascendDragonXToken0Loading || dragonXTitanXSlot0Loading || dragonXTitanXToken0Loading;\n  const usdLoading = titanXWethSlot0Loading || titanXWethToken0Loading || wethUsdcSlot0Loading || wethUsdcToken0Loading;\n  const coreError = startError || statsError || ascendDragonXSlot0Error || ascendDragonXToken0Error || dragonXTitanXSlot0Error || dragonXTitanXToken0Error;\n  const usdError = titanXWethSlot0Error || titanXWethToken0Error || wethUsdcSlot0Error || wethUsdcToken0Error;\n\n  const isLoading = coreLoading || usdLoading;\n  const hasError = coreError || usdError;\n\n  useEffect(() => {\n    if (coreError && retryCount < maxRetries) {\n      console.error(`[AscendantROI] Retrying due to core error, attempt ${retryCount + 1}`, {\n        startError: startErrorDetails?.message,\n        statsError: statsErrorDetails?.message,\n        ascendDragonXSlot0Error: ascendDragonXSlot0ErrorDetails?.message,\n        ascendDragonXToken0Error: ascendDragonXToken0ErrorDetails?.message,\n        dragonXTitanXSlot0Error: dragonXTitanXSlot0ErrorDetails?.message,\n        dragonXTitanXToken0Error: dragonXTitanXToken0ErrorDetails?.message,\n      });\n      setTimeout(() => setRetryCount(retryCount + 1), 2000);\n    } else if (!coreError && retryCount > 0) {\n      setRetryCount(0);\n    }\n  }, [coreError, retryCount, startErrorDetails, statsErrorDetails, ascendDragonXSlot0ErrorDetails, ascendDragonXToken0ErrorDetails, dragonXTitanXSlot0ErrorDetails, dragonXTitanXToken0ErrorDetails]);\n\n  const getPoolPrice = (slot0, token0Address, token1Address, poolAddress) => {\n    if (!slot0 || !slot0[0]) return { price: null, description: 'No data available' };\n    const sqrtPriceX96 = BigInt(slot0[0]);\n    const sqrtPrice = Number(sqrtPriceX96) / (2 ** 96);\n    let price = sqrtPrice * sqrtPrice; // token1/token0\n    const isToken0USDC = token0Address?.toLowerCase() === tokenContracts.USDC.address.toLowerCase();\n    const isToken1USDC = token1Address?.toLowerCase() === tokenContracts.USDC.address.toLowerCase();\n    if (isToken0USDC) price = 1 / price;\n    else if (isToken1USDC) price = price;\n    return { price, description: `${token1Address}/${token0Address} from ${poolAddress}` };\n  };\n\n  let auctionAscendantPerTitanX = null;\n  let marketAscendantPerTitanX = null;\n  let ascendPerDragonX = null;\n  let marketDragonXPerTitanX = null;\n  let roi = null;\n  let status = 'loading';\n\n  if (!coreLoading && !coreError && dailyStats && ascendDragonXSlot0 && ascendDragonXToken0 && dragonXTitanXSlot0 && dragonXTitanXToken0) {\n    const isAscendToken0 = ascendDragonXToken0.toLowerCase() === tokenContracts.ASCENDANT.address.toLowerCase();\n    const ascendDragonXPriceInfo = getPoolPrice(ascendDragonXSlot0, ascendDragonXToken0, tokenContracts.DRAGONX.address, ascendDragonXConfig.address);\n    ascendPerDragonX = isAscendToken0 ? ascendDragonXPriceInfo.price : ascendDragonXPriceInfo.price ? 1 / ascendDragonXPriceInfo.price : null;\n\n    const isDragonXToken0 = dragonXTitanXToken0.toLowerCase() === tokenContracts.DRAGONX.address.toLowerCase();\n    const dragonXTitanXPriceInfo = getPoolPrice(dragonXTitanXSlot0, dragonXTitanXToken0, tokenContracts.TITANX.address, dragonXTitanXConfig.address);\n    marketDragonXPerTitanX = isDragonXToken0 ? (dragonXTitanXPriceInfo.price ? 1 / dragonXTitanXPriceInfo.price : null) : dragonXTitanXPriceInfo.price;\n\n    if (ascendPerDragonX && marketDragonXPerTitanX) {\n      marketAscendantPerTitanX = ascendPerDragonX * marketDragonXPerTitanX;\n    }\n\n    const tokenEmitted = dailyStats[2] ? Number(formatEther(BigInt(dailyStats[2]))) : 0;\n    const titanXDeposited = dailyStats[0] ? Number(formatEther(BigInt(dailyStats[0]))) : 0;\n    auctionAscendantPerTitanX = titanXDeposited > 0 ? tokenEmitted / titanXDeposited : null;\n\n    roi = auctionAscendantPerTitanX && marketAscendantPerTitanX ? ((auctionAscendantPerTitanX / marketAscendantPerTitanX) * 100).toFixed(2) : null;\n    status = roi ? 'success' : 'no_data';\n  } else if (hasError) {\n    status = 'error';\n  }\n\n  return {\n    auctionAscendantPerTitanX,\n    marketAscendantPerTitanX,\n    ascendPerDragonX,\n    marketDragonXPerTitanX,\n    roi,\n    isLoading,\n    hasError,\n    status,\n  };\n}\n---\n\n---\nFile: ./eslint.config.mjs\nimport { dirname } from "path";\nimport { fileURLToPath } from "url";\nimport { FlatCompat } from "@eslint/eslintrc";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n});\n\nconst eslintConfig = [...compat.extends("next/core-web-vitals")];\n\nexport default eslintConfig;\n\n---\n