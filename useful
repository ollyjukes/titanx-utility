#!/bin/bash

# Define output files
STRUCTURE_FILE="project_structure.txt"
CONTENT_FILE="project_contents.txt"
SOLIDITY_DIR="solidity_contracts"
SUMMARY_FILE="project_summary.txt"

# Create directories if they don't exist
mkdir -p "$SOLIDITY_DIR"

# Clean up previous output files
rm -f "$STRUCTURE_FILE" "$CONTENT_FILE" "$SUMMARY_FILE"
rm -rf "$SOLIDITY_DIR"/* # Clear previous Solidity outputs
rm -f project_*_solidity.sol # Clear previous concatenated Solidity files

# Step 1: Generate directory structure
echo "Generating directory structure..." >&2
find . -type f \
  -not -path "./node_modules/*" \
  -not -path "./public/*" \
  -not -path "./.git/*" \
  -not -path "./.next/*" \
  -not -path "./bak/*" \
  -not -name "package-lock.json" \
  -not -name "*.log" \
  \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.css" -o -name "*.mjs" -o -name "*.json" -o -name "*.md" -o -name ".env*" -o -name ".gitignore" -o -name "*.sol" \) \
  -exec ls -lrt "{}" \; > "$STRUCTURE_FILE" 2>> "$SUMMARY_FILE"
if [ $? -ne 0 ]; then
  echo "Error: Failed to generate directory structure" >> "$SUMMARY_FILE"
fi
echo "Directory structure saved to $STRUCTURE_FILE" >&2

# Step 2: Dump file contents
echo "Dumping file contents..." >&2
> "$CONTENT_FILE"

# Process Solidity files
find ./SolidityContracts -type f -name "*.sol" 2>/dev/null | while IFS= read -r file; do
  file=$(echo "$file" | sed 's|^\./||')
  if [[ -f "$file" ]]; then
    echo "-e " >> "$CONTENT_FILE"
    echo "---" >> "$CONTENT_FILE"
    echo "File: ./$file" >> "$CONTENT_FILE"
    contract_name=$(basename "$file" .sol)
    subdir=$(dirname "$file" | sed 's|SolidityContracts/||')
    if [[ "$subdir" == "$file" || "$subdir" == "SolidityContracts" ]]; then
      subdir="Root"
    fi
    solidity_output="$SOLIDITY_DIR/${subdir}_${contract_name}_contract.txt"
    echo "Contract: $contract_name" > "$solidity_output"
    echo "Subdirectory: $subdir" >> "$solidity_output"
    echo "Path: ./$file" >> "$solidity_output"
    echo "Contents:" >> "$solidity_output"
    cat "$file" >> "$solidity_output" 2>/dev/null
    echo "Solidity file saved to $solidity_output" >> "$CONTENT_FILE"
    echo "-e " >> "$CONTENT_FILE"
    echo "---" >> "$CONTENT_FILE"
  fi
done

# Process non-Solidity files
find . -type f \
  -not -path "./node_modules/*" \
  -not -path "./public/*" \
  -not -path "./.git/*" \
  -not -path "./.next/*" \
  -not -path "./bak/*" \
  -not -name "package-lock.json" \
  -not -name "*.log" \
  -not -name "*.sol" \
  \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.css" -o -name "*.mjs" -o -name "*.json" -o -name "*.md" -o -name ".env*" -o -name ".gitignore" \) \
  -exec sh -c 'file "{}" | grep -q "text" && echo "{}"' \; | while IFS= read -r file; do
  file=$(echo "$file" | sed 's|^\./||')
  if [[ -f "$file" ]]; then
    echo "-e " >> "$CONTENT_FILE"
    echo "---" >> "$CONTENT_FILE"
    echo "File: ./$file" >> "$CONTENT_FILE"
    cat "$file" >> "$CONTENT_FILE" 2>/dev/null
    echo "-e " >> "$CONTENT_FILE"
    echo "---" >> "$CONTENT_FILE"
  fi
done
if [ $? -ne 0 ]; then
  echo "Error: Failed to dump file contents" >> "$SUMMARY_FILE"
fi
echo "File contents saved to $CONTENT_FILE (not displayed due to size)" >&2

# Step 3: Concatenate Solidity files by subdirectory
echo "Concatenating Solidity files by subdirectory..." >&2
# Find all subdirectories under SolidityContracts
find ./SolidityContracts -type d -maxdepth 1 -not -path "./SolidityContracts" | while IFS= read -r dir; do
  subdir=$(basename "$dir")
  concat_file="sol_project_${subdir}_solidity.sol"
  > "$concat_file" # Clear or create the file
  echo "// Concatenated Solidity source for $subdir contracts" >> "$concat_file"
  echo "// Generated on $(date)" >> "$concat_file"
  echo "" >> "$concat_file"
  find "$dir" -type f -name "*.sol" 2>/dev/null | sort | while IFS= read -r file; do
    echo "// Source: $file" >> "$concat_file"
    cat "$file" >> "$concat_file" 2>/dev/null
    echo "" >> "$concat_file"
  done
  if [ -s "$concat_file" ]; then
    echo "Concatenated Solidity files for $subdir saved to $concat_file" >> "$SUMMARY_FILE"
  else
    echo "No Solidity files found for $subdir" >> "$SUMMARY_FILE"
    rm -f "$concat_file"
  fi
done
echo "Solidity concatenation complete" >&2

# Step 4: Generate a project summary
echo "Generating project summary..." >&2
echo "Project Summary" > "$SUMMARY_FILE"
echo "==============" >> "$SUMMARY_FILE"

# Directory tree overview
if command -v tree >/dev/null 2>&1; then
  echo -e "\nDirectory Tree:" >> "$SUMMARY_FILE"
  tree -if --noreport -I "node_modules|.git|.next|public|bak" . >> "$SUMMARY_FILE"
else
  echo -e "\nDirectory Tree: (Install 'tree' with 'brew install tree' for this feature)" >> "$SUMMARY_FILE"
fi

# Package.json dependencies
if [ -f "package.json" ]; then
  echo -e "\nDependencies from package.json:" >> "$SUMMARY_FILE"
  if command -v jq >/dev/null 2>&1; then
    jq -r '.dependencies | keys[]' "package.json" 2>/dev/null | sed 's/^/  - /' >> "$SUMMARY_FILE"
    echo -e "\nDev Dependencies from package.json:" >> "$SUMMARY_FILE"
    jq -r '.devDependencies | keys[]' "package.json" 2>/dev/null | sed 's/^/  - /' >> "$SUMMARY_FILE"
  else
    echo "  (Install 'jq' with 'brew install jq' to parse package.json)" >> "$SUMMARY_FILE"
  fi
else
  echo -e "\npackage.json not found" >> "$SUMMARY_FILE"
fi

# Check for referenced but missing files
echo -e "\nReferenced Files Not Found:" >> "$SUMMARY_FILE"
echo "---------------------------" >> "$SUMMARY_FILE"

REFERENCED_FILES=(
  "./app/nft-contracts.js"
  "./app/api/holders/Element280/route.js"
  "./app/api/holders/Element369/route.js"
  "./app/api/holders/Stax/route.js"
  "./app/api/holders/Ascendant/route.js"
  "./app/page.js"
  "./app/nft/ETH/Element280/page.js"
  "./tailwind.config.js"
  "./next.config.mjs"
  "./app/layout.js"
  "./app/layout.css"
)

for file in "${REFERENCED_FILES[@]}"; do
  if ! grep -q "$file" "$STRUCTURE_FILE" 2>/dev/null; then
    echo "- $file (Referenced but not found in project structure)" >> "$SUMMARY_FILE"
  fi
done
echo "Project summary saved to $SUMMARY_FILE" >&2

# Step 5: Output results to terminal
clear
echo "Project Directory Structure:"
echo "============================"
if [ -s "$STRUCTURE_FILE" ]; then
  cat "$STRUCTURE_FILE"
else
  echo "No files found or error occurred. Check $SUMMARY_FILE for details." >&2
fi

echo -e "\nProject Summary:"
echo "================"
if [ -s "$SUMMARY_FILE" ]; then
  cat "$SUMMARY_FILE"
else
  echo "Summary generation failed. Check for errors above." >&2
fi

echo -e "\nOutput complete."
echo "File structure saved to $STRUCTURE_FILE"
echo "Non-Solidity file contents saved to $CONTENT_FILE"
echo "Solidity contracts saved to $SOLIDITY_DIR/*_contract.txt"
echo "Concatenated Solidity files saved to project_*_solidity.sol"
echo "Summary saved to $SUMMARY_FILE"
echo "Please share $STRUCTURE_FILE, $CONTENT_FILE, $SOLIDITY_DIR/*, project_*_solidity.sol, and $SUMMARY_FILE as needed." >&2 
